dir()
data <- read_csv("pml-training.csv")
library(readr)
data <- read_csv("pml-training.csv")
View(data)
data
data <- tbl_df(data)
library(dplyr)
data <- tbl_df(data)
data
View(data)
data[,12]
is.na(data[,12])
sum(is.na(data[,12]))
sum(is.na(data[,12]))/nrow(data)
sum(is.na(data[,]))/nrow(data)
sum(is.na(data[,1]))/nrow(data)
sum(is.na(data[,2]))/nrow(data)
?select
colSums(is.na(data))
data[, colSums(is.na(data)) < 1]
data[, colSums(is.na(data)) < 1]
data <- data[, colSums(is.na(data)) < 1]
View(data)
data <- read_csv("pml-training.csv", na = "")
data <- data[, colSums(is.na(data)) < 1]
View(data)
data <- read_csv("pml-training.csv")
data <- read_csv("pml-training.csv", na = " ")
data <- read_csv("pml-training.csv", na = " ")
data <- data[, colSums(is.na(data)) < 1]
data <- read_csv("pml-training.csv")
data <- data[, colSums(is.na(data)) < 1]
View(data)
source('~/.active-rstudio-document', echo=TRUE)
View(data)
View(data)
source('~/.active-rstudio-document', echo=TRUE)
?select
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
View(data)
source('~/.active-rstudio-document', echo=TRUE)
View(data)
data <- data[,-c(1:6)]
View(data)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
View(data)
source('~/.active-rstudio-document', echo=TRUE)
train(classe ~ ., data = training, method = "glm")
View(testing)
train(classe ~ ., data = training)
View(data)
train(classe ~ ., data = training, method = "glm")
View(data)
source('~/.active-rstudio-document', echo=TRUE)
str(data)
View(data)
View(training)
train <- shuffled[-indices,]
# The shuffled dataset is already loaded into your workspace
# Set random seed. Don't remove this line.
set.seed(1)
# Initialize the accs vector
accs <- rep(0, 6)
for (i in 1:6) {
# These indices indicate the interval of the test set
indices <- (((i-1) * round((1/6)*nrow(shuffled))) + 1):((i*round((1/6) * nrow(shuffled))))
# Exclude them from the train set
train <- shuffled[-indices,]
# Include them in the test set
test <- shuffled[indices,]
# A model is learned using each training set
tree <- rpart(Survived ~ ., train, method = "class")
# Make a prediction on the test set using tree
pred <- predict(tree, test, type = "class")
# Assign the confusion matrix to conf
conf <- table(test$Survived, pred)
# Assign the accuracy of this model to the ith index in accs
accs[i] <- diag(conf)/sum(conf)
}
# Print out the mean of accs
mean(accs)
?saveRDS
randomForest(classe ~ ., data = training)
library(randomForest)
randomForest(classe ~ ., data = training)
View(training)
str(training)
data$classe <- factor(data$clasee)
data$classe <- factor(data$classe)
str(data)
randomForest(classe ~ ., data = training)
training$classe <- factor(training$classe)
randomForest(classe ~ ., data = training)
rm(list = ls())
data <- read.csv("pml-training.csv")
View(data)
library(dplyr)
data <- data[, colSums(is.na(data)) == 0]
data <- data %>%
select(-starts_with("kurtosis")) %>%
select(-starts_with("skewness"))
data <- data[,-c(1:7)]
View(data)
View(data)
data <- read.csv("pml-training.csv")
View(data)
?read.csv
data <- read.csv("pml-training.csv", na.strings = c("NA"))
View(data)
data <- read.csv("pml-training.csv", na.strings = c("NA", ""))
View(data)
data <- read.csv("pml-training.csv", na.strings = c("NA", ""))
colnames(data)
data <- data[, colSums(is.na(data)) == 0]
View(data)
str(data)
data <- data[,-c(1:7)]
View(data)
str(data)
dim(data)
set.seed(070891)
library(caret)
inTrain <- createDataPartition(y = data$classe, p = .6, list = FALSE)
training <- data[inTrain, ]
testing <- data[-inTrain, ]
dim(training)
library(randomForest)
modelFit <- randomForest(classe ~ ., data = training)
modelFit
confusionMatrix(modelFit, testing$classe)
modelPred <- predict(modelFit, testing, type = "class")
confusionMatrix(modelPred, testing$classe)
library(rpart)
train(classe ~ ., data = training, method = "rf", ntree = 250)
?rfcv
View(training)
rfcv(training[,-53], training$classe, cv.fold = 3)
RF_CV <- rfcv(training[,-53], training$classe, cv.fold = 3)
install.packages("rattle")
rattle()
library(rattle)
rattle()
source('~/.active-rstudio-document', echo=TRUE)
